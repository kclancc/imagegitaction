
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  LOCAL_REPO: test_image
  LOCAL_TAG: latest
  ECR_REPOSITORY: ${{ secrets.REPO }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build
      id: build
      run: |
        docker build -t $LOCAL_REPO:$LOCAL_TAG .

    - name: CrowdStrike Container Image Scan
      uses: crowdstrike/container-image-scan-action@v1.1.0
      with:
        crowdstrike_score: 5000
        json_report: /tmp/output.json
      env:
        FALCON_CLIENT_ID: "${{ secrets.FALCON_CLIENT_ID }}"
        FALCON_CLIENT_SECRET: "${{ secrets.FALCON_CLIENT_SECRET }}"
        FALCON_CLOUD_REGION: "{{ secrets.FALCON_CLOUD_REGION }}"
        CONTAINER_REPO: test_image
        CONTAINER_TAG: latest
    
    - name: Upload Scan Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: image_scan_output
        path: /tmp/output.json

    - name: Build, tag, and push image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # push it to ECR so that it can
        # be deployed to ECS.
        docker tag $LOCAL_REPO:$LOCAL_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
